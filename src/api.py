"""
API REST para o sistema de gera√ß√£o de artigos.

Implementa endpoints usando FastAPI para permitir acesso
program√°tico ao sistema de gera√ß√£o de artigos via HTTP.
"""

import os
from datetime import datetime
from typing import Optional
from fastapi import FastAPI, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from pydantic import ValidationError

from src.models.article_models import (
    ArticleRequest,
    ArticleResponse,
    HealthResponse
)
from src.crew import ArticleGenerator


# Criar inst√¢ncia do FastAPI
app = FastAPI(
    title="Sistema Multiagente de Gera√ß√£o de Artigos",
    description=(
        "API REST para gera√ß√£o automatizada de artigos usando CrewAI. "
        "O sistema utiliza agentes especializados (Pesquisador e Escritor) "
        "que colaboram para criar artigos informativos baseados em pesquisa da Wikipedia."
    ),
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, especificar dom√≠nios permitidos
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configurar arquivos est√°ticos
app.mount("/static", StaticFiles(directory="static"), name="static")


# Vari√°vel global para armazenar o gerador
# Em produ√ß√£o, considerar usar dependency injection
_generator: Optional[ArticleGenerator] = None


def get_generator() -> ArticleGenerator:
    """
    Obt√©m ou cria uma inst√¢ncia do ArticleGenerator.
    
    Returns:
        ArticleGenerator: Inst√¢ncia configurada
    """
    global _generator
    
    if _generator is None:
        # Determinar provedor de LLM baseado em vari√°veis de ambiente
        llm_provider = os.getenv("LLM_PROVIDER", "gemini")
        
        # Validar que a API key est√° dispon√≠vel
        provider_env_vars = {
            "gemini": "GEMINI_API_KEY",
            "groq": "GROQ_API_KEY",
            "openrouter": "OPENROUTER_API_KEY"
        }
        
        env_var = provider_env_vars.get(llm_provider)
        if env_var and not os.getenv(env_var):
            raise ValueError(
                f"API key n√£o configurada. Defina a vari√°vel de ambiente {env_var}"
            )
        
        _generator = ArticleGenerator(llm_provider=llm_provider)
    
    return _generator


@app.get("/", tags=["Root"])
async def root():
    """
    Endpoint raiz da API - serve a interface web.
    
    Returns:
        FileResponse: P√°gina HTML principal da interface
    """
    return FileResponse("static/index.html")


@app.get("/api/health", response_model=HealthResponse, tags=["Health"])
async def health_check():
    """
    Verifica o status de sa√∫de da API.
    
    Returns:
        HealthResponse: Status do sistema
    """
    return HealthResponse(
        status="healthy",
        timestamp=datetime.now(),
        version="1.0.0"
    )


@app.post(
    "/api/generate-article",
    response_model=ArticleResponse,
    status_code=status.HTTP_200_OK,
    tags=["Articles"],
    summary="Gera um artigo sobre um t√≥pico espec√≠fico",
    description=(
        "Endpoint principal para gera√ß√£o de artigos. "
        "Recebe um t√≥pico e retorna um artigo completo gerado "
        "por agentes especializados usando pesquisa da Wikipedia."
    )
)
async def generate_article(request: ArticleRequest) -> ArticleResponse:
    """
    Gera um artigo baseado no t√≥pico fornecido.
    
    Args:
        request (ArticleRequest): Requisi√ß√£o com t√≥pico e par√¢metros
        
    Returns:
        ArticleResponse: Artigo gerado ou mensagem de erro
        
    Raises:
        HTTPException: Em caso de erro na gera√ß√£o
    """
    try:
        # Obter gerador
        generator = get_generator()
        
        # Gerar artigo
        response = generator.generate_article(request)
        
        # Se n√£o teve sucesso, retornar erro HTTP
        if not response.success:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail=response.error or "Erro desconhecido ao gerar artigo"
            )
        
        return response
        
    except ValidationError as e:
        raise HTTPException(
            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
            detail=f"Erro de valida√ß√£o: {str(e)}"
        )
    
    except ValueError as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e)
        )
    
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro interno do servidor: {str(e)}"
        )


@app.get("/api/providers", tags=["Configuration"])
async def list_providers():
    """
    Lista os provedores de LLM suportados.
    
    Returns:
        dict: Lista de provedores e suas configura√ß√µes
    """
    return {
        "providers": [
            {
                "name": "gemini",
                "description": "Google Gemini (op√ß√£o gratuita dispon√≠vel)",
                "env_var": "GEMINI_API_KEY",
                "model": "gemini-2.0-flash-exp"
            },
            {
                "name": "groq",
                "description": "Groq (alta velocidade)",
                "env_var": "GROQ_API_KEY",
                "model": "llama-3.3-70b-versatile"
            },
            {
                "name": "openrouter",
                "description": "OpenRouter (m√∫ltiplos modelos)",
                "env_var": "OPENROUTER_API_KEY",
                "model": "google/gemini-2.0-flash-exp:free"
            }
        ],
        "current_provider": os.getenv("LLM_PROVIDER", "gemini")
    }


@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """
    Handler global para exce√ß√µes n√£o tratadas.
    
    Args:
        request: Requisi√ß√£o HTTP
        exc: Exce√ß√£o capturada
        
    Returns:
        JSONResponse: Resposta de erro formatada
    """
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content={
            "success": False,
            "message": "Erro interno do servidor",
            "error": str(exc)
        }
    )


# Evento de inicializa√ß√£o
@app.on_event("startup")
async def startup_event():
    """
    Executado quando a API inicia.
    Valida configura√ß√µes e prepara o sistema.
    """
    print("üöÄ Iniciando Sistema Multiagente de Gera√ß√£o de Artigos...")
    print(f"üìù Provedor LLM: {os.getenv('LLM_PROVIDER', 'gemini')}")
    
    # Tentar inicializar o gerador para validar configura√ß√£o
    try:
        get_generator()
        print("‚úì Gerador de artigos inicializado com sucesso")
    except Exception as e:
        print(f"‚ö† Aviso: Erro ao inicializar gerador: {e}")
        print("   A API continuar√° funcionando, mas pode falhar ao gerar artigos")


@app.on_event("shutdown")
async def shutdown_event():
    """
    Executado quando a API √© desligada.
    Limpa recursos se necess√°rio.
    """
    print("üëã Encerrando Sistema Multiagente de Gera√ß√£o de Artigos...")


if __name__ == "__main__":
    import uvicorn
    
    # Configura√ß√£o do servidor
    port = int(os.getenv("PORT", 8000))
    host = os.getenv("HOST", "0.0.0.0")
    
    print(f"Iniciando servidor em http://{host}:{port}")
    print(f"Documenta√ß√£o dispon√≠vel em http://{host}:{port}/docs")
    
    uvicorn.run(
        "api:app",
        host=host,
        port=port,
        reload=True,  # Auto-reload em desenvolvimento
        log_level="info"
    )

